{"version":3,"file":"index.mjs","sources":["../lib/accessors.js","../lib/ndarray.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gscal( 3, 5.0, arraylike2object( toAccessorArray( x ) ), 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction gscal( N, alpha, x, stride, offset ) {\n\tvar xbuf;\n\tvar xget;\n\tvar xset;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\txbuf = x.data;\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\n\tix = offset;\n\tif ( stride === 0 ) {\n\t\txset( xbuf, ix, xget( xbuf, ix ) * N * alpha );\n\t\treturn x;\n\t}\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\txset( xbuf, ix, xget( xbuf, ix ) * alpha );\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\txset( xbuf, ix, xget( xbuf, ix ) * alpha );\n\t\t\txset( xbuf, ix+1, xget( xbuf, ix+1 ) * alpha );\n\t\t\txset( xbuf, ix+2, xget( xbuf, ix+2 ) * alpha );\n\t\t\txset( xbuf, ix+3, xget( xbuf, ix+3 ) * alpha );\n\t\t\txset( xbuf, ix+4, xget( xbuf, ix+4 ) * alpha );\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\txset( xbuf, ix, xget( xbuf, ix ) * alpha );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gscal( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -20.0, 25.0, -30.0 ]\n*/\nfunction gscal( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, alpha, o, stride, offset );\n\t\treturn x;\n\t}\n\n\tix = offset;\n\tif ( stride === 0 ) {\n\t\tx[ ix ] *= alpha * N;\n\t\treturn x;\n\t}\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] *= alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] *= alpha;\n\t\t\tx[ ix+1 ] *= alpha;\n\t\t\tx[ ix+2 ] *= alpha;\n\t\t\tx[ ix+3 ] *= alpha;\n\t\t\tx[ ix+4 ] *= alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] *= alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a scalar `alpha`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {PositiveInteger} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\nfunction gscal( N, alpha, x, stride ) {\n\treturn ndarray( N, alpha, x, stride, stride2offset( N, stride ) );\n}\n\n\n// EXPORTS //\n\nexport default gscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` by a constant.\n*\n* @module @stdlib/blas-base-gscal\n*\n* @example\n* import gscal from '@stdlib/blas-base-gscal';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal( x.length, 5.0, x, 1 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*\n* @example\n* import gscal from '@stdlib/blas-base-gscal';\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ -10.0, 5.0, 15.0, -25.0, 20.0, 0.0, -5.0, -15.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["M","gscal","N","alpha","x","stride","offset","ix","m","o","i","arraylike2object","accessorProtocol","xbuf","xget","xset","data","accessors","ndarray","stride2offset","setReadOnly","main"],"mappings":";;mUAsBA,IAAIA,EAAI,ECMR,IAAIA,EAAI,EAqBR,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAAQC,GACpC,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKR,GAAK,GAAe,IAAVC,EACd,OAAOC,EAGR,IADAK,EAAIE,EAAkBP,IACfQ,iBAEN,ODbF,SAAgBV,EAAGC,EAAOC,EAAGC,EAAQC,GACpC,IAAIO,EACAC,EACAC,EACAR,EACAC,EACAE,EAOJ,GALAG,EAAOT,EAAEY,KACTF,EAAOV,EAAEa,UAAW,GACpBF,EAAOX,EAAEa,UAAW,GAEpBV,EAAKD,EACW,IAAXD,EAEJ,OADAU,EAAMF,EAAMN,EAAIO,EAAMD,EAAMN,GAAOL,EAAIC,GAChCC,EAIR,GAAgB,IAAXC,EAAe,CAInB,IAHAG,EAAIN,EAAIF,GAGC,EACR,IAAMU,EAAI,EAAGA,EAAIF,EAAGE,IACnBK,EAAMF,EAAMN,EAAIO,EAAMD,EAAMN,GAAOJ,GACnCI,GAAMF,EAGR,GAAKH,EAAIF,EACR,OAAOI,EAER,IAAMM,EAAIF,EAAGE,EAAIR,EAAGQ,GAAKV,EACxBe,EAAMF,EAAMN,EAAIO,EAAMD,EAAMN,GAAOJ,GACnCY,EAAMF,EAAMN,EAAG,EAAGO,EAAMD,EAAMN,EAAG,GAAMJ,GACvCY,EAAMF,EAAMN,EAAG,EAAGO,EAAMD,EAAMN,EAAG,GAAMJ,GACvCY,EAAMF,EAAMN,EAAG,EAAGO,EAAMD,EAAMN,EAAG,GAAMJ,GACvCY,EAAMF,EAAMN,EAAG,EAAGO,EAAMD,EAAMN,EAAG,GAAMJ,GACvCI,GAAMP,EAEP,OAAOI,CACP,CACD,IAAMM,EAAI,EAAGA,EAAIR,EAAGQ,IACnBK,EAAMF,EAAMN,EAAIO,EAAMD,EAAMN,GAAOJ,GACnCI,GAAMF,CAGR,CCnCEY,CAAWf,EAAGC,EAAOM,EAAGJ,EAAQC,GACzBF,EAIR,GADAG,EAAKD,EACW,IAAXD,EAEJ,OADAD,EAAGG,IAAQJ,EAAQD,EACZE,EAIR,GAAgB,IAAXC,EAAe,CAInB,IAHAG,EAAIN,EAAIF,GAGC,EACR,IAAMU,EAAI,EAAGA,EAAIF,EAAGE,IACnBN,EAAGG,IAAQJ,EACXI,GAAMF,EAGR,GAAKH,EAAIF,EACR,OAAOI,EAER,IAAMM,EAAIF,EAAGE,EAAIR,EAAGQ,GAAKV,EACxBI,EAAGG,IAAQJ,EACXC,EAAGG,EAAG,IAAOJ,EACbC,EAAGG,EAAG,IAAOJ,EACbC,EAAGG,EAAG,IAAOJ,EACbC,EAAGG,EAAG,IAAOJ,EACbI,GAAMP,EAEP,OAAOI,CACP,CACD,IAAMM,EAAI,EAAGA,EAAIR,EAAGQ,IACnBN,EAAGG,IAAQJ,EACXI,GAAMF,EAEP,OAAOD,CACR,CCxDA,SAASH,EAAOC,EAAGC,EAAOC,EAAGC,GAC5B,OAAOa,EAAShB,EAAGC,EAAOC,EAAGC,EAAQc,EAAejB,EAAGG,GACxD,CCMAe,EAAAC,EAAA,UAAAH"}